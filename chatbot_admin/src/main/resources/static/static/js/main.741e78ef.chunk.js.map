{"version":3,"sources":["image/maple.jpg","store/modules/board/type.js","static/constant.js","store/modules/board/reducer.js","store/modules/main/type.js","store/modules/main/reducer.js","store/rootReducer.js","components/Login.js","store/api/userApi.js","store/modules/main/action.js","containers/LoginContainer.js","store/api/boardApi.js","helper/boardHelper.js","store/modules/board/action.js","components/Selector.js","components/Board.js","components/ContentsModal.js","components/Topbar.js","containers/BoardContainer.js","App.js","index.js"],"names":["module","exports","searchType","value","print","initialState","pageNumber","pageSize","selectedData","isModalOpen","modalData","isWriteModal","isSearch","keyword","boardId","handleActions","type","state","action","payload","accountId","errorMessage","rootReducer","combineReducers","main","board","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","form","width","submit","margin","Login","handleClick","isLoginPage","classes","useState","setAccountId","password","setPassword","useEffect","Grid","container","component","sx","height","CssBaseline","item","xs","sm","md","backgroundImage","logoPath","backgroundRepeat","backgroundColor","t","palette","mode","grey","backgroundSize","backgroundPosition","Paper","elevation","square","Box","my","mx","Avatar","className","Typography","variant","noValidate","onSubmit","event","preventDefault","TextField","required","fullWidth","id","label","name","autoComplete","autoFocus","onChange","target","Button","DOMAIN","loginApi","a","axios","post","user_id","user_pw","loginSuccess","createAction","loginFail","connect","dispatch","history","useHistory","loginSubmit","data","alert","push","get","getForSearch","getData","response","prevFakeData","createPrevFakeData","nextFakeData","createNextFakeData","realData","setRealData","isFirstPage","length","Array","totalPages","concat","isLastPage","contents","size","apply","map","Object","prototype","valueOf","currentValue","index","setFakeData","fakeData","tableData","modifyData","updatedData","allData","console","log","JSON","stringify","update","then","forEach","element","key","status","sendEmail","selectEmpty","Selector","dataList","selectedValue","handleChangeSelect","Select","displayEmpty","inputProps","MenuItem","selected","tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","root","flexGrow","padding","textAlign","color","text","secondary","Board","keywordInStore","columns","handleChangePageNumber","handleChangePageSize","handleRowClick","handleSearch","handleShowAllContentsButton","handleChangeSearchTypeSelect","searchKeyword","onChangePage","onChangeRowsPerPage","icons","page","pagenationType","options","search","paginationType","onRowClick","rowData","components","Toolbar","justify","direction","searchTypes","placeholder","onClick","rand","Math","round","random","getModalStyle","top","left","transform","position","background","border","boxShadow","shadows","ContentsModal","handleClose","handleSave","React","modalStyle","isModify","setIsModify","comments","setComments","setStatus","Modal","open","onClose","aria-labelledby","aria-describedby","style","email","message","InputLabelProps","shrink","defaultValue","disabled","multiline","rows","FormControl","InputLabel","labelId","gutterBottom","regdt","menuButton","marginRight","title","Topbar","AppBar","IconButton","edge","aria-label","changePage","trim","clickRow","closeModal","changeShowAllContents","keywordSearch","searchTypeSelectorChange","field","slice","App","path","exact","LoginContainer","BoardContainer","logger","createLogger","store","createStore","applyMiddleware","ReduxThunk","getState","ReactDOM","render","document","getElementById"],"mappings":"uFAAAA,EAAOC,QAAU,IAA0B,mC,6KCA5B,EACE,oBADF,EAEA,kBAFA,EAGE,oBAHF,EAIE,oBAJF,EAKkB,oCALlB,EAMK,uBANL,EAOkB,oCCNpBC,EAAa,CACtB,CAACC,MAAO,UAAWC,MAAO,4BAC1B,CAACD,MAAO,WAAYC,MAAO,4BAC3B,CAACD,MAAO,QAASC,MAAO,uBCCtBC,EAAe,CACjBC,WAAY,EACZC,SDP2B,GCQ3BC,aAAc,GACdC,aAAa,EACbC,UAAW,GACXC,cAAc,EACdC,UAAU,EACVC,QAAS,GACTC,QAAS,EACTZ,WAAY,IAGDa,eAAa,mBACnBC,GAAmB,SAACC,EAAOC,GAAR,mBAAC,eACdD,GADa,IAEhBX,WAAYY,EAAOC,QAAQb,WAC3BC,SAAUW,EAAOC,QAAQZ,SACzBC,aAAcU,EAAOC,QAAQX,kBALb,cAOnBQ,GAAiB,SAACC,EAAOC,GAAR,mBAAC,eACZD,GADW,IAEdR,aAAa,EACbC,UAAWQ,EAAOC,aAVF,cAYnBH,GAAmB,SAACC,EAAOC,GAAR,mBAAC,eACdD,GADa,IAEhBR,aAAa,EACbE,cAAc,EACdD,UAAW,QAhBK,cAkBnBM,GAAmB,SAACC,EAAOC,GAAR,mBAAC,eACdD,GADa,IAEhBT,aAAcU,EAAOC,aApBL,cAsBnBH,GAAmC,SAACC,EAAOC,GAAR,mBAAC,eAC9BD,GAD6B,IAEhCL,UAAU,EACVC,QAAS,GACTC,QAA4B,IAAlBG,EAAMH,QAAgB,EAAI,EACpCR,WAAYY,EAAOC,QAAQb,WAC3BC,SAAUW,EAAOC,QAAQZ,SACzBC,aAAcU,EAAOC,QAAQX,kBA7Bb,cA+BnBQ,GAAsB,SAACC,EAAOC,GAAR,mBAAC,eACjBD,GADgB,IAEnBL,UAAU,EACVC,QAASK,EAAOC,QAAQN,QACxBC,QAA4B,IAAlBG,EAAMH,QAAgB,EAAI,EACpCR,WAAYY,EAAOC,QAAQb,WAC3BC,SAAUW,EAAOC,QAAQZ,SACzBC,aAAcU,EAAOC,QAAQX,kBAtCb,cAwCnBQ,GAAmC,SAACC,EAAOC,GAAR,mBAAC,eAC9BD,GAD6B,IAEhCf,WAAYgB,EAAOC,aA1CH,GA4CrBd,GC9DQ,EACK,qBADL,EAEE,kBCMFU,eAAa,iBAAC,EACpBC,GAAsB,SAACC,EAAOC,GAAR,mBAAC,eACjBD,GADgB,IAEnBG,UAAWF,EAAOC,QAAQC,eAHV,YAAC,EAKpBJ,GAAmB,SAACC,EAAOC,GAAR,mBAAC,eACdD,GADa,IAEhBI,aAAcH,EAAOC,aAPL,GALP,CACjBC,UAAY,KACZC,aAAe,OCKJC,EALKC,YAAgB,CAChCC,OACAC,U,4MCSGC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,MAAO,CACHC,UAAWF,EAAMG,QAAQ,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEhBC,KAAM,CACFC,MAAO,OACPN,UAAWF,EAAMG,QAAQ,IAE7BM,OAAQ,CACJC,OAAQV,EAAMG,QAAQ,EAAG,EAAG,QAMtB,SAASQ,EAAT,GAA4C,IAA5BC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,YACrCC,EAAUhB,IAGhB,EAAkCiB,mBAAS,IAA3C,mBAAOvB,EAAP,KAAkBwB,EAAlB,KACA,EAAgCD,mBAAS,IAAzC,mBAAOE,EAAP,KAAiBC,EAAjB,KAOC,OALDC,qBAAU,WACTH,EAAa,IACbE,EAAY,MACV,CAACL,IAGC,kBAACO,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,OAAOC,GAAI,CAAEC,OAAQ,UAC7C,kBAACC,EAAA,EAAD,MACA,kBAACL,EAAA,EAAD,CACEM,MAAI,EACJC,IAAI,EACJC,GAAI,EACJC,GAAI,EACJN,GAAI,CACFO,gBAAiB,OAAOC,IAAS,IACjCC,iBAAkB,YAClBC,gBAAiB,SAACC,GAAD,MACI,UAAnBA,EAAEC,QAAQC,KAAmBF,EAAEC,QAAQE,KAAK,IAAMH,EAAEC,QAAQE,KAAK,MACnEC,eAAgB,QAChBC,mBAAoB,YAGxB,kBAACnB,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGP,UAAWkB,IAAOC,UAAW,EAAGC,QAAM,GACrE,kBAACC,EAAA,EAAD,CACEpB,GAAI,CACFqB,GAAI,EACJC,GAAI,EACJzC,QAAS,OACTC,cAAe,SACfC,WAAY,WAGd,kBAACwC,EAAA,EAAD,CAAQC,UAAWjC,EAAQb,OACzB,kBAAC,IAAD,OAEF,kBAAC+C,EAAA,EAAD,CAAY1B,UAAU,KAAK2B,QAAQ,MAAnC,cAGA,0BAAMF,UAAWjC,EAAQP,KAAM2C,YAAU,EAACC,SAAU,SAACC,GAAWA,EAAMC,iBAAkBzC,EAAYpB,EAAWyB,KAC7G,kBAACqC,EAAA,EAAD,CACE5C,OAAO,SACP6C,UAAQ,EACRC,WAAS,EACTC,GAAG,QACHC,MAAM,iEACNC,KAAK,QACLC,aAAa,QACbC,WAAS,EACrBtF,MAAOiB,EACPsE,SAAU,SAAAV,GAAK,OAAEpC,EAAaoC,EAAMW,OAAOxF,UAEjC,kBAAC+E,EAAA,EAAD,CACE5C,OAAO,SACP6C,UAAQ,EACRC,WAAS,EACTG,KAAK,WACLD,MAAM,uEACNtE,KAAK,WACLqE,GAAG,WACHG,aAAa,mBACzBrF,MAAO0C,EACP6C,SAAU,SAAAV,GAAK,OAAElC,EAAYkC,EAAMW,OAAOxF,UAEhC,kBAACyF,EAAA,EAAD,CACE5E,KAAK,SACLoE,WAAS,EACTP,QAAQ,YACpBF,UAAWjC,EAAQL,QAJT,e,sBCtGRwD,EAAS,8BAIR,SAAeC,GAAtB,qC,8CAAO,WAAwB1E,EAAWyB,GAAnC,SAAAkD,EAAA,sEACUC,IAAMC,KAAKJ,EAAO,WACnB,CAACK,QAAS9E,EAAW+E,QAAStD,IAFvC,oF,oCCDMuD,GAAeC,aACxBrF,GAAoB,SAACI,GAAD,MAAgB,CAACA,gBAI5BkF,GAAYD,aACrBrF,GAAiB,SAAAK,GAAY,OAAIA,KCkCtBkF,gBAXS,SAAAtF,GAAK,MAAK,CAC9BI,aAAcJ,EAAMO,KAAKH,aACzBoB,YAAaxB,EAAMO,KAAKiB,gBAID,SAAA+D,GAAQ,MAAK,CACpCJ,aAAc,SAAChF,GAAD,OAAeoF,EAASJ,GAAahF,KACnDkF,UAAW,SAACjF,GAAD,OAAkBmF,EAASF,GAAUjF,QAGrCkF,EAlCQ,SAAC,GAA4C,IAA3C9D,EAA0C,EAA1CA,YAAa2D,EAA6B,EAA7BA,aAAcE,EAAe,EAAfA,UAC5CG,EAAUC,cAERC,EAAW,uCAAG,WAAOtB,EAAIxC,GAAX,SAAAkD,EAAA,sEACKD,GAAST,EAAIxC,GADlB,OAGM,IAHN,OAGH+D,MAClBR,EAAaf,GACJwB,MAAM,uIACNJ,EAAQK,KAAK,YAEbR,EAAU,mCACVO,MAAM,mEATM,2CAAH,wDAajB,OAAO,kBAACtE,EAAD,CACHC,YAAamE,EACblE,YAAaA,OC3BfoD,GAAS,8BAGR,SAASkB,GAAIzG,EAAYC,GAC5B,OAAOyF,IAAMe,IAAIlB,GAAO,yBAAyBvF,EAAW,SAASC,GASlE,SAASyG,GAAa1G,EAAYC,EAAUL,EAAYW,GAC3D,OAAOmF,IAAMe,IAAIlB,GAAO,0BAA0BvF,EAAW,SAASC,EAAS,SAASL,EAAW,YAAYW,GCf5G,IAAMoG,GAAU,SAAC3G,EAAYC,EAAU2G,GAC1C,IAAIC,EAAeC,GAAmB7G,EAAWD,GAC7C+G,EAAeC,GAAmB/G,GAChCgH,EAAWC,GAAYN,EAASN,MAEtC,OAAIa,GAAYnH,GACY,IAApBiH,EAASG,OACF,IAAIC,MAEkB,IAA7BT,EAASN,KAAKgB,WACPL,EAEJA,EAASM,OAAOR,GAChBS,GAAWxH,EAAY4G,GACvBC,EAAaU,OAAON,GAEpBJ,EAAaU,OAAON,GAAUM,OAAOR,IAI9CG,GAAc,SAAAO,GAChB,OAAOA,GAGLX,GAAqB,SAAAY,GAEvB,OADeL,MAAMM,MAAM,KAAM,IAAIN,MAAMK,IAAOE,IAAIC,OAAOC,UAAUC,QAAS,IAAIF,QACpED,KAAI,SAACI,EAAcC,GAAf,OAAyBC,GAAYD,OAIvDjB,GAAqB,SAAAU,GAEvB,OADeL,MAAMM,MAAM,KAAM,IAAIN,MAAMK,IAAOE,IAAIC,OAAOC,UAAUC,QAAS,IAAIF,QACpED,KAAI,SAACI,EAAcC,GAAf,OAAyBC,GAAYD,OAGvDC,GAAc,SAAAnD,GAChB,IAAIoD,EAAW,IAAIN,OAEnB,OADAM,EAASC,UAAY,CAACrD,GAAIA,GACnBoD,GAGLhB,GAAe,SAAAnH,GACjB,OAAqB,GAAdA,GAGLwH,GAAa,SAACxH,EAAY4G,GAC5B,OAAO5G,GAAc4G,EAASN,KAAKgB,WAAa,GCwBvCe,GAAa,SAACtD,EAAIuD,EAAaC,GAAlB,OAA8B,SAAArC,GAGpD,OAFHsC,QAAQC,IAAIC,KAAKC,UAAUL,IF9DrB,SAAgBA,GACnB,OAAO5C,IAAMC,KAAKJ,GAAO,mBAAoB+C,GE+DtCM,CAAON,GACTO,MAAK,SAAAjC,GACX2B,EAAQO,SAAQ,SAAUC,GACzB,GAAIA,EAAQhE,IAAMA,OAAlB,CACoB,IAAK,IAAIiE,KAAOV,EACZS,EAAQC,GAAOV,EAAYU,GAG5B,OAAlBD,EAAQE,OACVF,EAAQE,OAAS,2BACQ,OAAjBF,EAAQE,OAChBF,EAAQE,OAAS,iCAEjBF,EAAQE,OAAS,mBAKZ/C,EAAS,CACLxF,KAAMA,EACNG,QAAS0H,OAGtBM,KF7EI,SAAmBP,GACtB,OAAO5C,IAAMC,KAAKJ,GAAO,aAAa+C,GE6EvCY,CAAUZ,M,kYC9FPlH,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnC6H,YAAa,CACT3H,UAAWF,EAAMG,QAAQ,QAIlB,SAAS2H,GAAT,GAAkE,IAA/CC,EAA8C,EAA9CA,SAAUC,EAAoC,EAApCA,cAAeC,EAAqB,EAArBA,mBACjDnH,EAAUhB,KAEhB,OAAQ,kBAACoI,GAAA,EAAD,CACJ3J,MAAyB,KAAlByJ,EAAuBD,EAAS,GAAGxJ,MAAQyJ,EAClDlE,SAAU,SAAAV,GAAK,OAAI6E,EAAmB7E,EAAMW,OAAOxF,QACnD4J,cAAY,EACZpF,UAAWjC,EAAQ+G,YACnBO,WAAY,CAAC,aAAc,kBAE1BL,EAASzB,KAAI,SAACtB,GAAD,OACV,kBAACqD,GAAA,EAAD,CAAUX,IAAK1C,EAAKzG,MAAOA,MAAOyG,EAAKzG,MAAO+J,UAAQ,GACjDtD,EAAKxG,WCGtB,IAAM+J,GAAa,CACfC,IAAKC,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,KAAD,iBAAYD,EAAZ,CAAmBC,IAAKA,QACxDC,MAAOH,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,KAAD,iBAAWD,EAAX,CAAkBC,IAAKA,QACzDE,MAAOJ,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,KAAD,iBAAWD,EAAX,CAAkBC,IAAKA,QACzDG,OAAQL,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,KAAD,iBAAmBD,EAAnB,CAA0BC,IAAKA,QAClEI,YAAaN,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,KAAD,iBAAkBD,EAAlB,CAAyBC,IAAKA,QACtEK,KAAMP,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,KAAD,iBAAUD,EAAV,CAAiBC,IAAKA,QACvDM,OAAQR,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,KAAD,iBAAaD,EAAb,CAAoBC,IAAKA,QAC5DO,OAAQT,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,KAAD,iBAAgBD,EAAhB,CAAuBC,IAAKA,QAC/DQ,UAAWV,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,KAAD,iBAAeD,EAAf,CAAsBC,IAAKA,QACjES,SAAUX,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,KAAD,iBAAcD,EAAd,CAAqBC,IAAKA,QAC/DU,SAAUZ,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,KAAD,iBAAkBD,EAAlB,CAAyBC,IAAKA,QACnEW,aAAcb,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,KAAD,iBAAiBD,EAAjB,CAAwBC,IAAKA,QACtEY,YAAad,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,KAAD,iBAAWD,EAAX,CAAkBC,IAAKA,QAC/Da,OAAQf,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,KAAD,iBAAYD,EAAZ,CAAmBC,IAAKA,QAC3Dc,UAAWhB,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,KAAD,iBAAmBD,EAAnB,CAA0BC,IAAKA,QACrEe,gBAAiBjB,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,KAAD,iBAAYD,EAAZ,CAAmBC,IAAKA,QACpEgB,WAAYlB,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,KAAD,iBAAgBD,EAAhB,CAAuBC,IAAKA,SAGjE7I,GAAYC,aAAW,SAACC,GAAD,MAAY,CACrCU,OAAQ,CACJA,OAAQV,EAAMG,QAAQ,IAE1ByJ,KAAM,CACFC,SAAU,GAEd5J,MAAO,CACH6J,QAAS9J,EAAMG,QAAQ,GACvB4J,UAAW,SACXC,MAAOhK,EAAMmC,QAAQ8H,KAAKC,WAE9BrC,YAAa,CACT3H,UAAWF,EAAMG,QAAQ,QAKlB,SAASgK,GAAT,GAC4J,IAD5IC,EAC2I,EAD3IA,eAAgB1L,EAC2H,EAD3HA,WAAYC,EAC+G,EAD/GA,SAAU0L,EACqG,EADrGA,QAASzL,EAC4F,EAD5FA,aAAcN,EAC8E,EAD9EA,WAC1DgM,EAAwI,EAAxIA,uBAAwBC,EAAgH,EAAhHA,qBAAsBC,EAA0F,EAA1FA,eAAgBC,EAA0E,EAA1EA,aAAcC,EAA4D,EAA5DA,4BAA6BC,EAA+B,EAA/BA,6BACjI7J,EAAUhB,KAEZ8K,EAAgB,GAKpB,OACI,kBAAC,KAAD,CACIC,aAAcP,EACdQ,oBAAqBP,EACrBQ,MAAOxC,GACP8B,QAASA,EACTW,KAAMtM,EACNsG,KAAMpG,EACNqM,eAAe,UACfC,QAAS,CACLC,QAAQ,EACRC,eAAgB,UAChBzM,SbpFe,IasFnB0M,WAAY,SAACjI,EAAOkI,GAChBd,EAAec,IAEnBC,WAAY,CACRC,QAAS,SAAA9C,GAAK,OACV,kBAAC,KAAD,CAAMrH,WAAS,GACX,kBAAC,KAAD,CAAMK,MAAI,EAACC,GAAI,GACX,kBAAC,KAAD,CAAMN,WAAS,EAACf,WAAW,SAASmL,QAAQ,WAAWC,UAAU,OAC7D,kBAAC,KAAD,CAAM3I,UAAWjC,EAAQJ,QACrB,kBAAC,KAAD,CAAMW,WAAS,EAAClB,QAAS,EAAGG,WAAW,YACnC,kBAAC,KAAD,CAAMoB,MAAI,GACN,kBAAC,KAAD,OAEJ,kBAAC,KAAD,CAAMA,MAAI,GACN,kBAACoG,GAAD,CACIC,SAAU4D,EACV3D,cAAe1J,EACf2J,mBAAoB0C,KAG5B,kBAAC,KAAD,CAAMjJ,MAAI,GACN,kBAAC,KAAD,CAAW+B,GAAG,uBACHmI,YAA+B,IAAlBxB,EAAuB,uBAAUA,EAAiB,2DAC/DtG,SAAU,SAAAV,GAAK,OAzCxC7E,EAyC6D6E,EAAMW,OAAOxF,WAxChGqM,EAAgBrM,GADK,IAACA,MA2CU,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAQyL,MAAM,UAAU5D,KAAK,SACrByF,QAAS,kBAAMpB,EAAa9L,EAAUL,EAAYsM,KAD1D,WAGJ,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAQZ,MAAM,YAAY5D,KAAK,SACvByF,QAAS,kBAAMnB,EAA4B/L,KADnD,6C,gEC1G5C,SAASmN,KACL,OAAOC,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,GAG5C,SAASC,KACL,IAAMC,EAAM,GAAKL,KACXM,EAAO,GAAKN,KAElB,MAAO,CACHK,IAAI,GAAD,OAAKA,EAAL,KACHC,KAAK,GAAD,OAAKA,EAAL,KACJC,UAAU,cAAD,OAAgBF,EAAhB,eAA0BC,EAA1B,OAIjB,IAAMtM,GAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,MAAO,CACHqM,SAAU,WACV9L,MAAO,IACPyB,gBAAiBjC,EAAMmC,QAAQoK,WAAWtM,MAC1CuM,OAAQ,iBACRC,UAAWzM,EAAM0M,QAAQ,GACzB5C,QAAS9J,EAAMG,QAAQ,EAAG,EAAG,QAMtB,SAASwM,GAAT,GAAyF,IAAjE9N,EAAgE,EAAhEA,YAAaC,EAAmD,EAAnDA,UAAWC,EAAwC,EAAxCA,aAAc6N,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,WAChF/L,EAAUhB,KAChB,EAAqBgN,IAAM/L,SAASmL,IAA7Ba,EAAP,oBAEA,EAAgChM,oBAAS,GAAzC,mBAAOiM,EAAP,KAAiBC,EAAjB,KACA,EAAgClM,qBAAhC,mBAAOmM,EAAP,KAAiBC,EAAjB,KACA,EAA4BpM,mBAASjC,EAAU6I,QAA/C,mBAAOA,EAAP,KAAeyF,EAAf,KAYA,OACI,6BACI,kBAACC,GAAA,EAAD,CACIC,KAAMzO,EACN0O,QAASX,EACTY,kBAAgB,qBAChBC,mBAAiB,4BAEjB,yBAAKC,MAAOX,EAAYhK,UAAWjC,EAAQb,OACvC,0BAAM8C,UAAWjC,EAAQP,KAAM2C,YAAU,EAACC,SAAU,SAACC,GACjDA,EAAMC,iBACNwJ,EApBT,CACZpJ,GAAI3E,EAAU2E,GACLkK,MAAO7O,EAAU6O,MAC1BhG,OAAQA,EACRiG,QAAS9O,EAAU8O,QACnBV,SAAUA,MAiBe,6BACI,kBAAC,KAAD,CACIzJ,GAAG,sBACHC,MAAM,4BACNF,WAAS,EACTqK,gBAAiB,CACbC,QAAQ,GAEZ7K,QAAQ,WACR8K,aAAcjP,EAAU8O,QACxBlN,OAAO,SACP6C,UAAQ,EACnCyK,UAAQ,IAEe,kBAAC,KAAD,CACIvK,GAAG,4BACHC,MAAM,2BACNkI,YAAY,iEACZpI,WAAS,EACTyK,WAAS,EACTC,KAAM,EACNH,aAAcb,EACdjK,QAAQ,WACRvC,OAAO,SACPoD,SAAU,SAAAV,GAAK,OAAI+J,EAAY/J,EAAMW,OAAOxF,QAC5CgF,UAAQ,IAE/B,kBAAC4K,GAAA,EAAD,CAAa3K,WAAS,GACrB,kBAAC4K,GAAA,EAAD,CAAY3K,GAAG,4BAAf,iBAA+C3E,EAAU6I,QACzD,kBAAC,KAAD,CACE0G,QAAQ,2BACR5K,GAAG,qBACHC,MAAM,2BACNI,SAAU,SAAAV,GAAK,OAAIgK,EAAUhK,EAAMW,OAAOxF,SAE1C,kBAAC,KAAD,CAAUA,MAAO,OAAjB,gBACA,kBAAC,KAAD,CAAUA,MAAO,OAAjB,kCACA,kBAAC,KAAD,CAAUA,MAAO,OAAjB,+BAIQ,6BACCQ,EACG,6BACI,kBAAC,KAAD,CAAYkE,QAAQ,QAAQqL,cAAY,GAAxC,wBAAgDxP,EAAU6O,OAC1D,kBAAC,KAAD,CAAMtM,WAAS,GACX,kBAAC,KAAD,CAAQjC,KAAK,SAAS4K,MAAM,UAAUjH,UAAWjC,EAAQL,QAAzD,QACA,kBAAC,KAAD,CAAQoL,QAAS,WACboB,GAAY,GACZL,MAFJ,WAOR,6BACI,kBAAC,KAAD,CAAY3J,QAAQ,QAAQqL,cAAY,GAAxC,wBAAgDxP,EAAU6O,OAC1D,kBAAC,KAAD,CAAY1K,QAAQ,QAAQqL,cAAY,GAAxC,wBAAgDxP,EAAUyP,OAC1D,kBAAC,KAAD,CAAMlN,WAAS,GACV2L,EACG,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAQ5N,KAAK,SAAS4K,MAAM,UACpBjH,UAAWjC,EAAQL,QAD3B,QAEA,kBAAC,KAAD,CAAQoL,QAAS,kBAAMoB,GAAY,KAAnC,SAGL,kBAAC,KAAD,CAAQjD,MAAM,UAAU6B,QAAS,kBAAMoB,GAAY,KAAnD,UAEH,kBAAC,KAAD,CAAQpB,QAAS,WACboB,GAAY,GACZL,MAFJ,e,uDC7H9B9M,GAAYC,aAAW,SAACC,GAAD,MAAY,CACrC4J,KAAM,CACFC,SAAU,GAEd2E,WAAY,CACRC,YAAazO,EAAMG,QAAQ,IAE/BuO,MAAO,CACH7E,SAAU,OAIH,SAAS8E,GAAT,GAA0B,IAATD,EAAQ,EAARA,MACtB5N,EAAUhB,KACV+E,EAAUC,cAEhB,OACI,yBAAK/B,UAAWjC,EAAQ8I,MACpB,kBAACgF,GAAA,EAAD,CAAQtC,SAAS,UACb,kBAAC,KAAD,KACI,kBAACuC,GAAA,EAAD,CAAYC,KAAK,QAAQ/L,UAAWjC,EAAQ0N,WAAYxE,MAAM,UAAU+E,aAAW,QAC/E,kBAAC,KAAD,OAEJ,kBAAC,KAAD,CAAY9L,QAAQ,KAAKF,UAAWjC,EAAQ4N,OACvCA,GAED,kBAAC,KAAD,CAAQ7C,QAAO,sBAAE,sBAAA1H,EAAA,sDACbU,EAAQK,KAAK,KADA,2CAEdjC,QAAQ,YAAYmD,KAAK,SAAS4D,MAAM,WAF3C,+BC9BxB,IAyFerF,gBAxBS,SAAAtF,GAAK,MAAK,CAC9BX,WAAaW,EAAMQ,MAAMnB,WACzBC,SAAWU,EAAMQ,MAAMlB,SACvBC,aAAeS,EAAMQ,MAAMjB,aAC3BC,YAAaQ,EAAMQ,MAAMhB,YACzBC,UAAWO,EAAMQ,MAAMf,UACvBC,aAAcM,EAAMQ,MAAMd,aAC1BC,SAAUK,EAAMQ,MAAMb,SACtBC,QAASI,EAAMQ,MAAMZ,QACrBC,QAASG,EAAMQ,MAAMX,QACrBZ,WAAYe,EAAMQ,MAAMvB,eAID,SAAAsG,GAAQ,MAAK,CACpCoK,WAAa,SAACtQ,EAAYC,EAAUL,EAAYW,EAASD,GAA5C,OAAyD4F,ELnFhD,SAAClG,EAAYC,EAAUL,EAAYW,EAASD,GAA5C,OAAyD,SAAA4F,GAK/E,OAHoB5F,GAA8B,IAAlBC,EAAQgQ,OACpC7J,GAAa1G,EAAa,EAAGC,EAAUL,EAAYW,GAAWkG,GAAIzG,EAAa,EAAGC,IAEpE4I,MAAK,SAAAjC,GACzB4B,QAAQC,IAAIC,KAAKC,UAAU/B,IACrB,IAAM1G,EAAeyG,GAAQ3G,EAAYC,EAAU2G,GACnDV,EAAS,CACRxF,KAAMA,EACHG,QAAS,CACLb,WAAYA,EACZC,SAAUA,EACVC,aAAcA,SKsEqDoQ,CAAWtQ,EAAYC,EAAUL,EAAYW,EAASD,KACrIkQ,SAAU,SAAC5D,GAAD,OAAa1G,EL5BH,SAAC0G,GAAD,MAAc,CAClClM,KAAMA,EACNG,QAAS+L,GK0BuB4D,CAAS5D,KACzC6D,WAAY,kBAAMvK,ELvBW,CAC7BxF,KAAMA,KKuBN2H,WAAY,SAACtD,EAAIuD,EAAaC,GAAlB,OAA8BrC,EAASmC,GAAWtD,EAAIuD,EAAaC,KAC/EmI,sBAAuB,SAACzQ,GAAD,OAAciG,ELjDJ,SAACjG,GAAD,OAAc,SAAAiG,GAG/C,OAAOO,GAAIzG,EAAgBC,GACtB4I,MAAK,SAAAjC,GACX,IAAM1G,EAAeyG,GAJD,EAIqB1G,EAAU2G,GACnDV,EAAS,CACRxF,KAAMA,EACNG,QAAS,CACTb,WARmB,EASnBC,SAAUA,EACVC,aAAcA,SKsCgCwQ,CAAsBzQ,KACpE0Q,cAAe,SAAC1Q,EAAUL,EAAYW,GAAvB,OAAmC2F,ELpEzB,SAACjG,EAAUL,EAAYW,GAAvB,OAAmC,SAAA2F,GAE5D,OAAOQ,GAAa1G,EAAgBC,EAAUL,EAAYW,GACrDsI,MAAK,SAAAjC,GACX,IAAM1G,EAAeyG,GAHD,EAGqB1G,EAAU2G,GACnDV,EAAS,CACRxF,KAAMA,EACNG,QAAS,CACRN,QAASA,EACTP,WARkB,EASlBC,SAAUA,EACVC,aAAcA,SKyD4CyQ,CAAc1Q,EAAUL,EAAYW,KAC/FqQ,yBAA0B,SAAC/Q,GAAD,OAAWqG,ELUD,SAACrG,GAAD,MAAY,CAChDa,KAAMA,EACNG,QAAShB,GKZqC+Q,CAAyB/Q,QAG5DoG,EAzFQ,SAAC,GACuH,IADtHjG,EACqH,EADrHA,WAAYC,EACyG,EADzGA,SAAUC,EAC+F,EAD/FA,aAAcC,EACiF,EADjFA,YAAaC,EACoE,EADpEA,UAAWC,EACyD,EADzDA,aAAcC,EAC2C,EAD3CA,SAAUC,EACiC,EADjCA,QAASC,EACwB,EADxBA,QAASZ,EACe,EADfA,WACnG0Q,EAAkH,EAAlHA,WAAYE,EAAsG,EAAtGA,SAAUC,EAA4F,EAA5FA,WAAYpI,EAAgF,EAAhFA,WAAYsI,EAAoE,EAApEA,cAAeD,EAAqD,EAArDA,sBAAuBE,EAA8B,EAA9BA,yBAG5GnO,qBAAU,WACN6N,EAAWtQ,EAAYC,KACxB,IAuBH,OACI,6BACI,kBAACgQ,GAAD,CACID,MAAM,gDAEV,kBAACvE,GAAD,CACIzC,IAAKxI,EACLR,WAAYA,EACZC,SAAUA,EACVL,WAAYA,EACZqM,6BAA8B2E,EAC9BlF,eAAgBnL,EAChBqL,uBAzBmB,SAAC5L,GAC5BsQ,EAAWtQ,EAAYC,EAAUL,EAAYW,EAASD,IAyB9CuL,qBAtBiB,SAAC5L,GAC1BqQ,EAAWtQ,EAAYC,EAAUL,EAAYW,EAASD,IAsB9CwL,eAAgB0E,EAChBzE,aAAc4E,EACd3E,4BAA6B0E,EAC7B/E,QAtCI,CACZ,CAACqE,MAAO,2BAAQa,MAAO,WACvB,CAACb,MAAO,qBAAOa,MAAO,SACtB,CAACb,MAAO,2BAAQa,MAAO,YACvB,CAACb,MAAO,2BAAQa,MAAO,UACvB,CAACb,MAAO,2BAAQa,MAAO,UAkCf3Q,aAAcA,IAEhBC,EACF,kBAAC8N,GAAD,CACI9N,YAAaA,EACbC,UAAWA,EACXE,SAAUA,EACVC,QAASA,EACT2N,YAAauC,EACbtC,WAhCS,SAAC7F,GAClBD,EAAWjI,EAAU2E,GAAIuD,EAAapI,EAAa4Q,MAAM,IACzDL,KA+BQpQ,aAAcA,IAEhB,SCjDC0Q,GAZH,WACR,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACrO,UAAWsO,KACjC,kBAAC,IAAD,CAAOF,KAAK,SAASpO,UAAWuO,QCI1CC,GAASC,cACTC,GAAQC,YAAYvQ,EAAawQ,YAAgBJ,GAAQK,MAC/DjJ,QAAQC,IAAI6I,GAAMI,YAElBC,IAASC,OACL,kBAAC,IAAD,CAAUN,MAAOA,IACb,kBAAC,GAAD,OAEJO,SAASC,eAAe,W","file":"static/js/main.741e78ef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/maple.9cfd598e.jpg\";","export default {\n    CHANGE_PAGE: 'BOARD/CHANGE_PAGE',\n    CLICK_ROW: 'BOARD/CLICK_ROW',\n    CLOSE_MODAL: 'BOARD/CLOSE_MODAL',\n    MODIFY_DATA: 'BOARD/MODIFY_DATA',\n    CHANGE_SHOWING_ALL_CONTENTS: 'BOARD/CHANGE_SHOWING_ALL_CONTENTS',\n    KEYWORD_SEARCH: 'BOARD/KEYWORD_SEARCH',\n    SEARCH_TYPE_SELECTOR_CHANGE: 'BOARD/SEARCH_TYPE_SELECTOR_CHANGE',\n}\n","export const BOARD_PAGE_SIZE = 10;\nexport const searchType = [\n    {value: \"MESSAGE\", print: \"문의사항\"},\n    {value: \"LOCATION\", print: \"버그경로\"},\n    {value: \"EMAIL\", print: \"등록자\"}\n]\n","import {handleActions} from 'redux-actions'\nimport type from './type'\nimport {BOARD_PAGE_SIZE} from '../../../static/constant';\n\n// store's state\nconst initialState = {\n    pageNumber: 0,\n    pageSize: BOARD_PAGE_SIZE,\n    selectedData: [],\n    isModalOpen: false,\n    modalData: {},\n    isWriteModal: false,\n    isSearch: false,\n    keyword: \"\",\n    boardId: 0,\n    searchType: \"\",\n};\n\nexport default handleActions({\n        [type.CHANGE_PAGE]: (state, action) => ({\n            ...state,\n            pageNumber: action.payload.pageNumber,\n            pageSize: action.payload.pageSize,\n            selectedData: action.payload.selectedData\n        }),\n        [type.CLICK_ROW]: (state, action) => ({\n            ...state,\n            isModalOpen: true,\n            modalData: action.payload,\n        }),\n        [type.CLOSE_MODAL]: (state, action) => ({\n            ...state,\n            isModalOpen: false,\n            isWriteModal: false,\n            modalData: {},\n        }),\n        [type.MODIFY_DATA]: (state, action) => ({\n            ...state,\n            selectedData: action.payload\n        }),\n        [type.CHANGE_SHOWING_ALL_CONTENTS]: (state, action) => ({\n            ...state,\n            isSearch: false,\n            keyword: \"\",\n            boardId: (state.boardId === 0 ? 1 : 0),\n            pageNumber: action.payload.pageNumber,\n            pageSize: action.payload.pageSize,\n            selectedData: action.payload.selectedData\n        }),\n        [type.KEYWORD_SEARCH]: (state, action) => ({\n            ...state,\n            isSearch: true,\n            keyword: action.payload.keyword,\n            boardId: (state.boardId === 0 ? 1 : 0),\n            pageNumber: action.payload.pageNumber,\n            pageSize: action.payload.pageSize,\n            selectedData: action.payload.selectedData\n        }),\n        [type.SEARCH_TYPE_SELECTOR_CHANGE]: (state, action) => ({\n            ...state,\n            searchType: action.payload\n        })\n    }, initialState\n)\n","export default {\n    LOGIN_SUCCESS : 'MAIN/LOGIN_SUCCESS',\n    LOGIN_FAIL : 'MAIN/LOGIN_FAIL',\n}\n","import {handleActions} from 'redux-actions'\nimport type from './type';\n\nconst initialState = {\n    accountId : null,\n    errorMessage : null,\n}\n\nexport default handleActions({\n        [type.LOGIN_SUCCESS] : (state, action) => ({\n            ...state,\n            accountId: action.payload.accountId,\n        }),\n        [type.LOGIN_FAIL] : (state, action) => ({\n            ...state,\n            errorMessage: action.payload\n        })\n    }, initialState\n);\n","import {combineReducers, createStore} from \"redux\";\n\nimport board from './modules/board/reducer'\nimport main from './modules/main/reducer'\n\nconst rootReducer = combineReducers({\n    main,\n    board\n});\n\nexport default rootReducer;\n","import React, {useEffect, useState} from 'react';\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Typography from '@mui/material/Typography';\nimport {makeStyles} from '@material-ui/core/styles';\n\nimport logoPath from '../image/maple.jpg';\n\n\n/* For css - Start */\n\tconst useStyles = makeStyles((theme) => ({\n\t    paper: {\n\t        marginTop: theme.spacing(8),\n\t        display: 'flex',\n\t        flexDirection: 'column',\n\t        alignItems: 'center',\n\t    },\n\t    form: {\n\t        width: '100%',\n\t        marginTop: theme.spacing(1),\n\t    },\n\t    submit: {\n\t        margin: theme.spacing(3, 0, 2),\n\t    },\n\t}));\n/* For css - End */\n\n\nexport default function Login({handleClick, isLoginPage}) {\n\tconst classes = useStyles();\n\n\n\tconst [accountId, setAccountId] = useState(\"\");\n\tconst [password, setPassword] = useState(\"\");\n\t\n\tuseEffect(()=>{\n\t\tsetAccountId(\"\");\n\t\tsetPassword(\"\");\n\t}, [isLoginPage])\n\n  return (\n      <Grid container component=\"main\" sx={{ height: '100vh' }}>\n        <CssBaseline />\n        <Grid\n          item\n          xs={false}\n          sm={4}\n          md={7}\n          sx={{\n            backgroundImage: 'url('+logoPath+')',\n            backgroundRepeat: 'no-repeat',\n            backgroundColor: (t) =>\n              t.palette.mode === 'light' ? t.palette.grey[50] : t.palette.grey[900],\n            backgroundSize: 'cover',\n            backgroundPosition: 'center',\n          }}\n        />\n        <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n          <Box\n            sx={{\n              my: 8,\n              mx: 4,\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n            }}\n          >\n            <Avatar className={classes.paper}>\n              <LockOutlinedIcon />\n            </Avatar>\n            <Typography component=\"h1\" variant=\"h5\">\n              Admin Page\n            </Typography>\n            <form className={classes.form} noValidate onSubmit={(event) => {event.preventDefault(); handleClick(accountId, password)}}>\n              <TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"아이디를 입력해주세요.\"\n                name=\"email\"\n                autoComplete=\"email\"\n                autoFocus\n\t\t\t\tvalue={accountId}\n\t\t\t\tonChange={event=>setAccountId(event.target.value)}\n              />\n              <TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"비밀번호를 입력해주세요.\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n\t\t\t\tvalue={password}\n\t\t\t\tonChange={event=>setPassword(event.target.value)}\n              />\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n\t\t\t\tclassName={classes.submit}\n              >\n                Sign In\n              </Button>\n            </form>\n          </Box>\n        </Grid>\n      </Grid>\n  );\n}","import axios from 'axios';\n\nconst DOMAIN = \"http://localhost:8071/admin\";\n\n\n// For user login\nexport async function loginApi(accountId, password) {\n    return await axios.post(DOMAIN+'/onLogin',\n                {user_id: accountId, user_pw: password});\n}","import {createAction} from \"redux-actions\";\nimport type from './type'\n\n\n// login success\nexport const loginSuccess = createAction(\n    type.LOGIN_SUCCESS, (accountId) => ({accountId})\n);\n\n// login fail\nexport const loginFail = createAction(\n    type.LOGIN_FAIL, errorMessage => errorMessage\n)","import React from \"react\";\nimport {connect} from 'react-redux';\nimport {useHistory} from \"react-router-dom\";\n\n\nimport Login from \"../components/Login\";\n\nimport {loginApi} from '../store/api/userApi';\nimport {loginFail, loginSuccess} from \"../store/modules/main/action\";\n\n\nconst LoginContainer = ({isLoginPage, loginSuccess, loginFail}) => {\n    let history = useHistory();\n\n    const loginSubmit = async (id, password) => {\n        var response = await loginApi(id, password);\n\t\t\n        if (response.data === 1) {\n\t\t\tloginSuccess(id);\n            alert(\"로그인에 성공하셨습니다. 게시판으로 이동합니다.\");\n            history.push(\"/board\");\n        } else {\n            loginFail(\"로그인 실패\");\n            alert(\"로그인에 실패했습니다.\");\n        }\n    }\n\n    return <Login\n        handleClick={loginSubmit}\n        isLoginPage={isLoginPage}\n    />;\n}\n\n// store's state <> local state mapping\nconst mapStateToProps = state => ({\n    errorMessage: state.main.errorMessage,\n    isLoginPage: state.main.isLoginPage\n})\n\n// action dispatch\nconst mapDispatchToProps = dispatch => ({\n    loginSuccess: (accountId) => dispatch(loginSuccess(accountId)),\n    loginFail: (errorMessage) => dispatch(loginFail(errorMessage))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(LoginContainer);\n","import axios from 'axios';\n\nconst DOMAIN = \"http://localhost:8071/admin\";\n\n// For get all board list\nexport function get(pageNumber, pageSize) {\n    return axios.get(DOMAIN+'/getAllBoardList?page='+pageNumber+'&size='+pageSize);\n}\n\n// For update board data by id\nexport function update(updatedData) {\n    return axios.post(DOMAIN+'/updateBoardById', updatedData);\n}\n\n// For get specific board data by type\nexport function getForSearch(pageNumber, pageSize, searchType, keyword) {\n    return axios.get(DOMAIN+\"/getBoardBySearch?page=\"+pageNumber+\"&size=\"+pageSize+\"&type=\"+searchType+\"&keyword=\"+keyword);\n}\n\n// For send Email by id\nexport function sendEmail(updatedData) {\n    return axios.post(DOMAIN+\"/sendEmail\",updatedData);\n}\n","\nexport const getData = (pageNumber, pageSize, response) => {\n    let prevFakeData = createPrevFakeData(pageSize * pageNumber);\n    let nextFakeData = createNextFakeData(pageSize);\n    const realData = setRealData(response.data);\n\n    if (isFirstPage(pageNumber)) {\n        if (realData.length === 0){\n            return new Array();\n        }\n        if (response.data.totalPages === 1) {\n            return realData;\n        }\n        return realData.concat(nextFakeData);\n    } else if (isLastPage(pageNumber, response)) {\n        return prevFakeData.concat(realData);\n    } else {\n        return prevFakeData.concat(realData).concat(nextFakeData);\n    }\n}\n\nconst setRealData = contents => {\n    return contents;\n}\n\nconst createPrevFakeData = size => {\n    let fakeData = Array.apply(null, new Array(size)).map(Object.prototype.valueOf, new Object());\n    return fakeData.map((currentValue, index) => setFakeData(index));\n}\n\n\nconst createNextFakeData = size => {\n    let fakeData = Array.apply(null, new Array(size)).map(Object.prototype.valueOf, new Object());\n    return fakeData.map((currentValue, index) => setFakeData(index));\n}\n\nconst setFakeData = id => {\n    let fakeData = new Object();\n    fakeData.tableData = {id: id};\n    return fakeData;\n}\n\nconst isFirstPage  = pageNumber => {\n    return pageNumber == 0;\n}\n\nconst isLastPage = (pageNumber, response) => {\n    return pageNumber == response.data.totalPages - 1\n}\n","import type from './type'\nimport {get, update, getForSearch,sendEmail} from \"../../api/boardApi\";\nimport {getData} from \"../../../helper/boardHelper\";\n\nexport const changePage = (pageNumber, pageSize, searchType, keyword, isSearch) => dispatch => {\n\n    const requestApi = (isSearch && keyword.trim() != \"\" ?\n        getForSearch(pageNumber + 1, pageSize, searchType, keyword) : get(pageNumber + 1, pageSize));\n\n    return requestApi.then(response => {\n\t\tconsole.log(JSON.stringify(response));\n        const selectedData = getData(pageNumber, pageSize, response);\n        dispatch({\n        \ttype: type.CHANGE_PAGE,\n            payload: {\n                pageNumber: pageNumber,\n                pageSize: pageSize,\n                selectedData: selectedData\n            }\n        })\n    })\n}\n\n// keyword 검색 func\nexport const keywordSearch = (pageSize, searchType, keyword) => dispatch => {\n    const pageNumber = 0;\n    return getForSearch(pageNumber + 1, pageSize, searchType, keyword)\n        .then(response => {\n\t\t\tconst selectedData = getData(pageNumber, pageSize, response);\n\t\t\tdispatch({\n\t\t\t\ttype: type.KEYWORD_SEARCH,\n\t\t\t\tpayload: {\n\t\t\t\t\tkeyword: keyword,\n\t\t\t\t\tpageNumber: pageNumber,\n\t\t\t\t\tpageSize: pageSize,\n\t\t\t\t\tselectedData: selectedData\n\t\t\t\t}\n\t\t\t})\n        })\n}\n\n// 전체글 보기 func\nexport const changeShowAllContents = (pageSize) => dispatch => {\n    const pageNumber = 0;\n\n    return get(pageNumber + 1, pageSize)\n        .then(response => {\n\t\t\tconst selectedData = getData(pageNumber, pageSize, response);\n\t\t\tdispatch({\n\t\t\t\ttype: type.CHANGE_SHOWING_ALL_CONTENTS,\n\t\t\t\tpayload: {\n\t\t\t\tpageNumber: pageNumber,\n\t\t\t\tpageSize: pageSize,\n\t\t\t\tselectedData: selectedData\n\t\t\t\t}\n\t\t\t})\n        })\n}\n\n// 특정 row click func\nexport const clickRow = (rowData) => ({\n    type: type.CLICK_ROW,\n    payload: rowData\n})\n\n// modal 닫기 func\nexport const closeModal = () => ({\n    type: type.CLOSE_MODAL,\n})\n\n// modal 글 수정 func\nexport const modifyData = (id, updatedData, allData) => dispatch => {\n\tconsole.log(JSON.stringify(updatedData));\n\t\n    return update(updatedData)\n        .then(response => {\n\t\t\tallData.forEach(function (element) {\n\t\t\t\tif (element.id == id) {\n                        for (var key in updatedData) {\n                            element[key] = updatedData[key];\n                        }\n\n\t\t\t\t\t\tif(element.status == '003'){\n\t\t\t\t\t\t\telement.status = \"처리완료\";\n\t\t\t\t\t\t}else if(element.status =='002'){\n\t\t\t\t\t\t\telement.status = \"처리진행중\";\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\telement.status = \"접수\";\n\t\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t})\n            dispatch({\n                type: type.MODIFY_DATA,\n                payload: allData,\n            })\n        })\n\t\t.then(\t// 글 수정 완료 후, mail 알림\n\t\t\tsendEmail(updatedData)\n\t\t)\n}\n\n// keyword type 변경 func\nexport const searchTypeSelectorChange = (value) => ({\n    type: type.SEARCH_TYPE_SELECTOR_CHANGE,\n    payload: value\n})","import {MenuItem, Select} from \"@material-ui/core\";\nimport React, {useState} from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(theme => ({\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\nexport default function Selector({dataList, selectedValue, handleChangeSelect}) {\n    const classes = useStyles();\n\n    return (<Select\n        value={selectedValue === \"\" ? dataList[0].value : selectedValue}\n        onChange={event => handleChangeSelect(event.target.value)}\n        displayEmpty\n        className={classes.selectEmpty}\n        inputProps={{'aria-label': 'Without label'}}\n    >\n        {dataList.map((data) => (\n            <MenuItem key={data.value} value={data.value} selected>\n                {data.print}\n            </MenuItem>\n        ))}\n    </Select>);\n}\n","import React, {forwardRef} from 'react';\nimport MaterialTable from 'material-table';\nimport {Button, Grid, TextField} from \"@material-ui/core\";\nimport {BOARD_PAGE_SIZE, searchType as searchTypes} from '../static/constant';\n\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport SearchIcon from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Selector from \"./Selector\";\n\n/* for CSS - Start */\nconst tableIcons = {\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref}/>),\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref}/>),\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref}/>),\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref}/>),\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref}/>),\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref}/>),\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref}/>),\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref}/>),\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref}/>),\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref}/>),\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref}/>),\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref}/>),\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref}/>),\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref}/>),\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref}/>),\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref}/>),\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref}/>)\n};\n\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n        margin: theme.spacing(2),\n    },\n    root: {\n        flexGrow: 1,\n    },\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n}));\n/* for CSS - End */\n\nexport default function Board({keywordInStore, pageNumber, pageSize, columns, selectedData, searchType,\n                                  handleChangePageNumber, handleChangePageSize, handleRowClick, handleSearch, handleShowAllContentsButton, handleChangeSearchTypeSelect}) {\n    const classes = useStyles();\n\n    let searchKeyword = \"\";\n    const setSearchKeyword = (value) => {\n        searchKeyword = value;\n    };\n\n    return (\n        <MaterialTable\n            onChangePage={handleChangePageNumber}\n            onChangeRowsPerPage={handleChangePageSize}\n            icons={tableIcons}\n            columns={columns}\n            page={pageNumber}\n            data={selectedData}\n            pagenationType=\"stepped\"\n            options={{\n                search: false,\n                paginationType: \"stepped\",\n                pageSize: BOARD_PAGE_SIZE\n            }}\n            onRowClick={(event, rowData) => {\n                handleRowClick(rowData);\n            }}\n            components={{\n                Toolbar: props => (\n                    <Grid container>\n                        <Grid item xs={6}>\n                            <Grid container alignItems=\"center\" justify=\"flex-end\" direction=\"row\">\n                                <Grid className={classes.margin}>\n                                    <Grid container spacing={1} alignItems=\"flex-end\">\n                                        <Grid item>\n                                            <SearchIcon/>\n                                        </Grid>\n                                        <Grid item>\n                                            <Selector\n                                                dataList={searchTypes}\n                                                selectedValue={searchType}\n                                                handleChangeSelect={handleChangeSearchTypeSelect}\n                                            />\n                                        </Grid>\n                                        <Grid item>\n                                            <TextField id=\"input-with-icon-grid\"\n                                                       placeholder={keywordInStore != \"\" ? \"검색어: \" + keywordInStore : \"검색어를 입력하세요.\"}\n                                                       onChange={event => setSearchKeyword(event.target.value)}/>\n                                        </Grid>\n                                        <Grid>\n                                            <Button color=\"primary\" size=\"medium\"\n                                                    onClick={() => handleSearch(pageSize, searchType, searchKeyword)}>Search</Button>\n                                        </Grid>\n                                        <Grid>\n                                            <Button color=\"secondary\" size=\"medium\"\n                                                    onClick={() => handleShowAllContentsButton(pageSize)}>전체글\n                                                보기</Button>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                ),\n            }}\n        />\n    );\n}\n","import React, {useState} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport {Button, Modal, TextField, Typography, Grid} from '@material-ui/core';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\n\n\n/* for CSS - Start */\nfunction rand() {\n    return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n    const top = 50 + rand();\n    const left = 50 + rand();\n\n    return {\n        top: `${top}%`,\n        left: `${left}%`,\n        transform: `translate(-${top}%, -${left}%)`,\n    };\n}\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        position: 'absolute',\n        width: 400,\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n    },\n}));\n/* for CSS - End */\n\n\nexport default function ContentsModal({isModalOpen, modalData, isWriteModal, handleClose, handleSave}) {\n    const classes = useStyles();\n    const [modalStyle] = React.useState(getModalStyle);\n\n    const [isModify, setIsModify] = useState(false);\n    const [comments, setComments] = useState();\n    const [status, setStatus] = useState(modalData.status);\n\n    const combineData = () => {\t// submit form\n        return {\n\t\t\tid: modalData.id,\n            email: modalData.email,\n\t\t\tstatus: status,\n\t\t\tmessage: modalData.message,\n\t\t\tcomments: comments\n        }\n    }\n\n    return (\n        <div>\n            <Modal\n                open={isModalOpen}\n                onClose={handleClose}\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n            >\n                <div style={modalStyle} className={classes.paper}>\n                    <form className={classes.form} noValidate onSubmit={(event) => {\n                        event.preventDefault();\n                        handleSave(combineData());\n                    }}>\n                            <div>\n                                <TextField\n                                    id=\"outlined-full-width\"\n                                    label=\"버그 내역\"\n                                    fullWidth\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                    variant=\"outlined\"\n                                    defaultValue={modalData.message}\n                                    margin=\"normal\"\n                                    required\n\t\t\t\t\t\t\t\t\tdisabled\n                                />\n                                <TextField\n                                    id=\"outlined-multiline-static\"\n                                    label=\"처리상황\"\n                                    placeholder=\"처리상황을 입력하세요.\"\n                                    fullWidth\n                                    multiline\n                                    rows={4}\n                                    defaultValue={comments}\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    onChange={event => setComments(event.target.value)}\n                                    required\n                                />\n\t\t\t\t\t\t       <FormControl fullWidth>\n\t\t\t\t\t\t        <InputLabel id=\"demo-simple-select-label\">상태: {modalData.status}</InputLabel>\n\t\t\t\t\t\t        <Select\n\t\t\t\t\t\t          labelId=\"demo-simple-select-label\"\n\t\t\t\t\t\t          id=\"demo-simple-select\"\n\t\t\t\t\t\t          label=\"처리상태\"\n\t\t\t\t\t\t          onChange={event => setStatus(event.target.value)}\n\t\t\t\t\t\t        >\n\t\t\t\t\t\t          <MenuItem value={'001'}>접수</MenuItem>\n\t\t\t\t\t\t          <MenuItem value={'002'}>처리진행중</MenuItem>\n\t\t\t\t\t\t          <MenuItem value={'003'}>처리완료</MenuItem>\n\t\t\t\t\t\t        </Select>\n\t\t\t\t\t\t      </FormControl>\n                            </div>\n                        <hr/>\n                        {isWriteModal ?\n                            <div>\n                                <Typography variant=\"body2\" gutterBottom>작성자 : {modalData.email}</Typography>\n                                <Grid container>\n                                    <Button type=\"submit\" color=\"primary\" className={classes.submit}>Save</Button>\n                                    <Button onClick={() => {\n                                        setIsModify(false);\n                                        handleClose();\n                                    }}>Close</Button>\n                                </Grid>\n                            </div>\n                            :\n                            <div>\n                                <Typography variant=\"body2\" gutterBottom>작성자 : {modalData.email}</Typography>\n                                <Typography variant=\"body2\" gutterBottom>작성일 : {modalData.regdt}</Typography>\n                                <Grid container>\n                                    {isModify ?\n                                        <Grid>\n                                            <Button type=\"submit\" color=\"primary\"\n                                                    className={classes.submit}>Save</Button>\n                                            <Button onClick={() => setIsModify(false)}>Back</Button>\n                                        </Grid>\n                                        :\n                                       <Button color=\"primary\" onClick={() => setIsModify(true)}>Modify</Button>\n                                    }\n                                    <Button onClick={() => {\n                                        setIsModify(false);\n                                        handleClose();\n                                    }}>Close</Button>\n                                </Grid>\n                            </div>\n                        }\n                    </form>\n                </div>\n            </Modal>\n        </div>\n    );\n}","import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nimport {useHistory} from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nexport default function Topbar({title}) {\n    const classes = useStyles();\n    const history = useHistory();\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        {title}\n                    </Typography>\n                        <Button onClick={async () => {\n                            history.push(\"/\")\n                        }} variant=\"contained\" size=\"medium\" color=\"primary\" >로그아웃</Button>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n","import React, {useEffect} from \"react\";\nimport {connect} from 'react-redux';\nimport {changePage, clickRow, closeModal, modifyData, keywordSearch, changeShowAllContents, searchTypeSelectorChange} from \"../store/modules/board/action\";\nimport Board from \"../components/Board\";\nimport ContentsModal from \"../components/ContentsModal\";\nimport Topbar from \"../components/Topbar\";\n\nconst BoardContainer = ({pageNumber, pageSize, selectedData, isModalOpen, modalData, isWriteModal, isSearch, keyword, boardId, searchType,\n                            changePage, clickRow, closeModal, modifyData, keywordSearch, changeShowAllContents, searchTypeSelectorChange}) => {\n\n\n    useEffect(() => {\n        changePage(pageNumber, pageSize);\n    }, [])\n\n    const columns = [\n        {title: '문의사항', field: 'message'},\n        {title: '작성자', field: 'email'},\n        {title: '버그경로', field: 'location'},\n        {title: '처리상태', field: 'status'},\n        {title: '등록일자', field: 'regdt'},\n    ]\n\n    const handleChangePageNumber = (pageNumber) => {\n        changePage(pageNumber, pageSize, searchType, keyword, isSearch);\n    };\n\n    const handleChangePageSize = (pageSize) => {\n        changePage(pageNumber, pageSize, searchType, keyword, isSearch);\n    };\n\n    const handleModify = (updatedData) => {\n        modifyData(modalData.id, updatedData, selectedData.slice(0));\n        closeModal();\n    }\n\n    return (\n        <div>\n            <Topbar\n                title=\"버그 문의게시판\"\n            />\n            <Board\n                key={boardId}\n                pageNumber={pageNumber}\n                pageSize={pageSize}\n                searchType={searchType}\n                handleChangeSearchTypeSelect={searchTypeSelectorChange}\n                keywordInStore={keyword}\n                handleChangePageNumber={handleChangePageNumber}\n                handleChangePageSize={handleChangePageSize}\n                handleRowClick={clickRow}\n                handleSearch={keywordSearch}\n                handleShowAllContentsButton={changeShowAllContents}\n                columns={columns}\n                selectedData={selectedData}\n            />\n            { isModalOpen ?\n            <ContentsModal\n                isModalOpen={isModalOpen}\n                modalData={modalData}\n                isSearch={isSearch}\n                keyword={keyword}\n                handleClose={closeModal}\n                handleSave={handleModify}\n                isWriteModal={isWriteModal}\n            />\n            : null}\n        </div>\n    );\n}\n\n// store's state <> local state mapping\nconst mapStateToProps = state => ({\n    pageNumber : state.board.pageNumber,\n    pageSize : state.board.pageSize,\n    selectedData : state.board.selectedData,\n    isModalOpen: state.board.isModalOpen,\n    modalData: state.board.modalData,\n    isWriteModal: state.board.isWriteModal,\n    isSearch: state.board.isSearch,\n    keyword: state.board.keyword,\n    boardId: state.board.boardId,\n    searchType: state.board.searchType\n})\n\n// action dispatch\nconst mapDispatchToProps = dispatch => ({\n    changePage : (pageNumber, pageSize, searchType, keyword, isSearch) => dispatch(changePage(pageNumber, pageSize, searchType, keyword, isSearch)),\n    clickRow: (rowData) => dispatch(clickRow(rowData)),\n    closeModal: () => dispatch(closeModal()),\n    modifyData: (id, updatedData, allData) => dispatch(modifyData(id, updatedData, allData)),\n    changeShowAllContents: (pageSize) => dispatch(changeShowAllContents(pageSize)),\n    keywordSearch: (pageSize, searchType, keyword) => dispatch(keywordSearch(pageSize, searchType, keyword)),\n    searchTypeSelectorChange: (value) => dispatch(searchTypeSelectorChange(value)),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(BoardContainer)\n","import React from \"react\";\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\nimport LoginContainer from \"./containers/LoginContainer\";\nimport BoardContainer from \"./containers/BoardContainer\";\n\nconst App = () => {\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route path=\"/\" exact component={LoginContainer}/>\n                <Route path=\"/board\" component={BoardContainer} />\n            </Switch>\n        </BrowserRouter>\n    )\n\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from 'react-dom';\n\nimport {applyMiddleware, createStore} from 'redux';\nimport rootReducer from './store/rootReducer';\n\nimport {createLogger} from \"redux-logger/src\";\nimport ReduxThunk from 'redux-thunk';\n\nimport {Provider} from 'react-redux';\n\nimport './index.css';\nimport App from './App';\n\nconst logger = createLogger();\nconst store = createStore(rootReducer, applyMiddleware(logger, ReduxThunk));\nconsole.log(store.getState());\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}